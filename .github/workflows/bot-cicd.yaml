name: Lint+Format, Test, Update, Upload 
on:
  # To manually run the workflow
  workflow_dispatch:

  # On each main push event
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  run-lint-and-formatting:
    # checks for common errors, code style consistency... 
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Installing dependicies and running lint+formatting
        run: |
          make deps
          make lint

      - name: Check if changes happened...  
        run: if [ -n "$(git status --porcelain)" ]; then export GIT_STATUS=1; else export GIT_STATUS=0; fi

      - name: Push changes 
        if: ${{ env.GIT_STATUS == 1 }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Automated formatting and linting..."
          git push
  

  run-tests:
    needs: run-lint-and-formatting
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Installing deps
        run: make deps
  
      - name: Running tests
        run: pytest

  update-image:
    # update docker images if requirements are changed
    needs: run-tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
            
    - name: Log in to the Container Registry
      uses: docker/login-action@v3
      with: 
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with: 
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  update-remote:
    needs: update-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start SSH agent
        run: |
          eval `ssh-agent -s`
          printf "${{ secrets.PRIVATE_SSH_KEY }}" >> ~/.ssh/telegram_bot
          ssh-add ~/.ssh/telegram_bot

      - name: RSync prod compose
        # archive, verbose, compress   
        run: |
          rsync -avz -e 'ssh -p ${{ secrets.REMOTE_PORT }}' --progress ./prod.docker-compose.yaml ${{ secrets.REMOTE_USERNAME }}@${{ secrets.REMOTE_HOST }}:~/project/

      - name: RSync environment variables
        run: |
          printf "${{ secrets.CONN_STRING }}\n" >> .env
          printf "${{ secrets.TELEGRAM_TOKEN }}\n" >> .env
          rsync -avz -e 'ssh -p ${{ secrets.REMOTE_PORT }}' --progress ./.env ${{ secrets.REMOTE_USERNAME }}@${{ secrets.REMOTE_HOST }}:~/project/


      - name: Run a compose file
        run: |
          ssh -p ${{ secrets.REMOTE_PORT }} ${{ secrets.REMOTE_USERNAME }}@${{ secrets.REMOTE_HOST }}
          printf "${{ secrets.GHCR_TOKEN }}" >> docker login ghcr.io -u ${{ secrets.DOCKER_USERNAME}} --password-stdin 
          docker compose -f ~/project/prod.docker-compose.yaml build
          docker compose -f ~/project/prod.docker-compose.yaml up
